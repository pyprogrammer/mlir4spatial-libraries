package generated
import spatial.libdsl._
import tensorflow_lattice._
import mlir_libraries.types.TypeImplicits._
import mlir_libraries.DumpScope
object rtl_d1l2r4c16s1_log2_callable {
  def rtl_d1l2r4c16s1_log2_callable[F32:Num](arg0_0: mlir_libraries.types.ReadableND[F32], arg0_1: mlir_libraries.types.ReadableND[F32], arg0_2: mlir_libraries.types.ReadableND[F32], arg0_3: mlir_libraries.types.ReadableND[F32], arg0_4: mlir_libraries.types.ReadableND[F32], arg0_5: mlir_libraries.types.ReadableND[F32], arg0_6: mlir_libraries.types.ReadableND[F32], arg0_7: mlir_libraries.types.ReadableND[F32], arg0_8: mlir_libraries.types.ReadableND[F32])(implicit state: argon.State, config: mlir_libraries.OptimizationConfig, coprocScope: mlir_libraries.CoprocessorScope, dumpScope: DumpScope): (mlir_libraries.types.ReadableND[F32]) = {
    import mlir_libraries._
    val (v0) = tfl.PWLCalibration(input_keypoints = mlir_libraries.Tensor(values=Array(0.000000e+00, 6.573680e+00, 7.862112e+00, 8.529517e+00, 9.110410e+00, 9.552440e+00, 1.021618e+01, 1.066684e+01), shape = Array(8)), pwl_calibration_kernel = mlir_libraries.Tensor(values=Array(3.603253e-02, 1.811659e-02, 1.159680e-03, 9.544755e-01, 8.671491e-01, 5.919504e-01, -5.285400e-02, 9.699816e-02, -5.306076e-01, -1.107469e-01, 5.828020e-03, -1.276061e-02, -7.256256e-01, -2.520465e-01, 6.467896e-02, -2.259769e-02, -2.089392e-01, 3.375479e-02, 1.412153e-01, -7.423285e-02, -5.987610e-03, 4.164310e-01, -2.549167e-01, -1.407650e-02), shape = Array(8, 3)))(arg0_0)
    val (v1) = tfl.CategoricalCalibration(categorical_calibration_kernel = mlir_libraries.Tensor(values=Array(3.625998e-01, 4.102941e-02, 9.796439e-01, 5.000000e-01), shape = Array(4, 1)))(arg0_1)
    val (v2) = tfl.CategoricalCalibration(categorical_calibration_kernel = mlir_libraries.Tensor(values=Array(9.881741e-01, 5.170277e-01, 7.568764e-01, 9.784847e-01, 4.198300e-01, 6.626388e-01, 0.000000e+00, 0.000000e+00, 2.830219e-01, 1.125341e-03, 0.000000e+00, 3.494108e-04, 8.086485e-01, 2.136658e-01, 6.294741e-01, 0.000000e+00, 0.000000e+00, 3.459508e-01, 0.000000e+00, 0.000000e+00, 3.017790e-01, 0.000000e+00, 0.000000e+00, 3.258230e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 4.987018e-02, 1.596653e-01, 0.000000e+00, 0.000000e+00, 4.556038e-01, 2.484374e-02, 6.038424e-03, 8.462955e-01, 7.898830e-01, 0.000000e+00, 4.743383e-01, 0.000000e+00, 3.450609e-01, 2.806992e-01, 9.328241e-02, 2.741801e-03, 3.043606e-01, 9.883082e-01, 1.000000e+00, 9.875538e-01, 0.000000e+00, 0.000000e+00, 3.934354e-01, 0.000000e+00, 0.000000e+00, 4.892309e-01, 5.924075e-01, 2.292251e-01, 9.865854e-01, 9.461537e-01, 7.430900e-01, 2.340008e-02, 4.146709e-01, 5.393358e-01, 9.712456e-01, 0.000000e+00, 2.064689e-01, 4.977642e-03, 1.627987e-01, 1.620810e-01, 1.623678e-01, 0.000000e+00, 0.000000e+00, 3.238317e-01, 9.861528e-01, 7.983060e-02, 9.820409e-01, 2.101121e-02, 1.775041e-02, 2.008080e-02, 0.000000e+00, 0.000000e+00, 6.242496e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 3.899374e-01, 7.626557e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 3.975382e-01, 0.000000e+00, 0.000000e+00, 3.553178e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 4.343562e-01, 7.099599e-01, 0.000000e+00, 0.000000e+00, 2.985974e-01, 0.000000e+00, 0.000000e+00, 3.298279e-01, 0.000000e+00, 0.000000e+00, 2.597567e-01, 0.000000e+00, 0.000000e+00, 3.624941e-01, 0.000000e+00, 5.294368e-01, 1.193127e-01, 0.000000e+00, 0.000000e+00, 3.059695e-01, 0.000000e+00, 0.000000e+00, 3.972808e-01, 0.000000e+00, 4.739931e-01, 3.757144e-01, 1.000000e+00, 0.000000e+00, 7.320384e-01, 6.039087e-01, 3.102010e-01, 8.154518e-01, 0.000000e+00, 1.000000e+00, 0.000000e+00, 0.000000e+00, 8.866453e-01, 0.000000e+00, 4.141440e-01, 3.176971e-02, 3.733976e-01, 0.000000e+00, 9.788221e-01, 0.000000e+00, 1.673602e-02, 1.410181e-01, 3.701308e-01, 9.686487e-01, 2.521299e-01, 9.839149e-01, 0.000000e+00, 0.000000e+00, 3.919764e-01, 0.000000e+00, 0.000000e+00, 3.548637e-01, 3.093579e-01, 2.930975e-01, 6.085516e-02, 8.806762e-01, 5.463634e-01, 8.068954e-01, 0.000000e+00, 0.000000e+00, 4.077960e-01, 0.000000e+00, 0.000000e+00, 6.293225e-01, 0.000000e+00, 5.515435e-02, 7.699440e-01, 0.000000e+00, 0.000000e+00, 3.634520e-01, 0.000000e+00, 0.000000e+00, 2.996400e-01, 5.441065e-01, 5.056708e-01, 9.054071e-01, 1.000000e+00, 1.000000e+00, 2.995294e-01, 5.254523e-01, 4.764847e-01, 5.133898e-01, 2.735027e-01, 9.794277e-01, 8.815007e-01, 1.000000e+00, 2.661552e-02, 1.000000e+00, 3.967179e-01, 1.531150e-02, 1.962023e-01, 0.000000e+00, 5.148217e-01, 5.114626e-01, 0.000000e+00, 0.000000e+00, 3.195891e-01, 0.000000e+00, 0.000000e+00, 3.671375e-01, 0.000000e+00, 0.000000e+00, 3.288703e-01, 5.000000e-01, 5.000000e-01, 5.000000e-01), shape = Array(71, 3)))(arg0_2)
    val (v3) = tfl.CategoricalCalibration(categorical_calibration_kernel = mlir_libraries.Tensor(values=Array(9.897897e-01, 5.650822e-01, 4.860784e-01, 0.000000e+00, 3.608510e-03, 2.618777e-02, 1.000000e+00, 7.678433e-01, 7.461290e-01, 7.330771e-01, 0.000000e+00, 5.000000e-01), shape = Array(12, 1)))(arg0_3)
    val (v4) = tfl.PWLCalibration(input_keypoints = mlir_libraries.Tensor(values=Array(0.000000e+00, 6.188264e+00, 6.889591e+00, 7.286192e+00, 7.599401e+00, 7.930566e+00, 9.083983e+00, 2.104532e+01), shape = Array(8)), pwl_calibration_kernel = mlir_libraries.Tensor(values=Array(4.014629e-01, 1.609844e-01, 5.966198e-01, 8.165371e-01, -9.818140e-03, 1.922226e-02, -1.118666e-02, -3.327490e-03, -2.476983e-01, -8.911250e-03, -6.701338e-01, -9.695890e-03, -3.697453e-02, -1.056474e-02, -2.227136e-02, -5.553960e-03), shape = Array(8, 2)))(arg0_4)
    val (v5) = tfl.PWLCalibration(input_keypoints = mlir_libraries.Tensor(values=Array(0.000000e+00, 7.214504e+00, 7.935587e+00, 8.459988e+00, 8.913819e+00, 9.328213e+00, 9.881293e+00, 2.099325e+01), shape = Array(8)), pwl_calibration_kernel = mlir_libraries.Tensor(values=Array(1.274060e-03, 1.752964e-02, 5.031657e-01, 6.909645e-02, 1.640043e-01, -7.141986e-02, -5.944077e-01, 1.265267e-02, 7.174576e-01, 6.712534e-02, 2.820396e-02, 7.682385e-01, -6.948002e-01, 2.734989e-02, 5.113600e-03, 3.778017e-02), shape = Array(8, 2)))(arg0_5)
    val (v6) = tfl.CategoricalCalibration(categorical_calibration_kernel = mlir_libraries.Tensor(values=Array(9.867680e-01, 4.083519e-02, 5.000000e-01), shape = Array(3, 1)))(arg0_6)
    val (v7) = tfl.PWLCalibration(input_keypoints = mlir_libraries.Tensor(values=Array(0.000000e+00, 1.000000e+00, 3.000000e+00), shape = Array(3)), pwl_calibration_kernel = mlir_libraries.Tensor(values=Array(3.548382e-01, 4.512013e-01, 6.451404e-01, -4.512013e-01, 1.937151e-05, 0.000000e+00), shape = Array(3, 2)))(arg0_7)
    val (v8) = tfl.PWLCalibration(input_keypoints = mlir_libraries.Tensor(values=Array(0.000000e+00, 1.000000e+00, 2.000000e+00, 3.000000e+00), shape = Array(4)), pwl_calibration_kernel = mlir_libraries.Tensor(values=Array(9.809987e-01, -9.643396e-01, 9.394863e-01, 0.000000e+00), shape = Array(4, 1)))(arg0_8)
    val (v9) = tf.Concatenate(axis = 1)(v0, v1, v2, v3, v4, v5, v6, v7, v8)
    val (v10_) = tf.GatherV2(axis = 1, indices = mlir_libraries.Tensor(values=Array(8, 5, 2, 12, 15, 10, 4, 14, 0, 6, 3, 11, 7, 9, 1, 13), shape = Array(4, 4)))(v9)
    val v10 = dumpScope.dump("v10")(v10_)
//    val v11 = v10
    val (v11_) = spatiallib.Materialize(parallelization = 1, uptime = mlir_libraries.Fraction(num = 1, den = 1))(v10)
    val v11 = dumpScope.dump("v11")(v11_)
    val (v12_) = tfl.Lattice(lattice_kernel = mlir_libraries.Tensor(values=Array(3.362419e-01, 1.989479e-02, 2.157462e-02, 1.229143e-02, 1.398221e-02, 5.685530e-02, 9.902865e-01, 1.261285e-02, 2.736660e-02, 9.763098e-01, 9.712788e-02, 2.221690e-02, 5.299945e-01, 9.738311e-01, 9.915118e-01, 2.236905e-02, 9.438654e-01, 5.498449e-01, 5.739176e-01, 2.010252e-01, 9.961193e-01, 6.387573e-01, 5.296203e-01, 1.058933e-02, 3.849815e-02, 1.962447e-01, 2.123205e-01, 9.441247e-01, 7.301437e-01, 1.846906e-01, 9.573790e-01, 9.411668e-01, 8.208253e-01, 7.592796e-04, 9.820082e-01, 4.163333e-01, 9.793473e-01, 7.641457e-04, 7.481546e-01, 4.349446e-02, 8.231042e-01, 9.839610e-01, 9.747303e-01, 9.897445e-01, 3.492141e-01, 9.912654e-01, 9.995235e-01, 9.902756e-01, 1.934424e-02, 9.863759e-01, 1.614255e-02, 9.908546e-01, 7.750014e-04, 9.866490e-01, 7.037646e-01, 9.880817e-01, 9.504128e-01, 5.658635e-01, 5.012096e-01, 3.233612e-01, 9.734335e-01, 5.511649e-01, 9.712705e-01, 3.731366e-01), shape = Array(16, 4)), shape = mlir_libraries.Tensor(values=Array(2, 2, 2, 2), shape = Array(4)), tp = "hypercube", units = 4)(v11)
    val v12 = dumpScope.dump("v12")(v12_)
//    val v13 = v12
    val (v13_) = spatiallib.Materialize(parallelization = 1, uptime = mlir_libraries.Fraction(num = 1, den = 4))(v12)
    val v13 = dumpScope.dump("v13")(v13_)
    val (v14) = tfl.Linear(linear_layer_bias = -1.722883e+00, linear_layer_kernel = mlir_libraries.Tensor(values=Array(2.087154e+00, 8.169860e-01, 1.067188e+00, 1.038967e+00), shape = Array(4, 1)))(v13)
    val (v15) = tfl.PWLCalibration(input_keypoints = mlir_libraries.Tensor(values=Array(0.000000e+00, 3.225806e-02, 6.451613e-02, 9.677419e-02, 1.290323e-01, 1.612903e-01, 1.935484e-01, 2.258064e-01, 2.580645e-01, 2.903226e-01, 3.225806e-01, 3.548387e-01, 3.870968e-01, 4.193548e-01, 4.516129e-01, 4.838710e-01, 5.161290e-01, 5.483871e-01, 5.806451e-01, 6.129032e-01, 6.451613e-01, 6.774194e-01, 7.096774e-01, 7.419355e-01, 7.741935e-01, 8.064516e-01, 8.387097e-01, 8.709677e-01, 9.032258e-01, 9.354839e-01, 9.677419e-01, 1.000000e+00), shape = Array(32)), pwl_calibration_kernel = mlir_libraries.Tensor(values=Array(0.000000e+00, 1.595753e-03, 1.748317e-03, 1.530232e-03, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 1.690350e-07, 3.809109e-07, 1.802575e-06, 6.275233e-04, 5.417805e-03, 7.891627e-03, 1.304967e-02, 1.854081e-02, 4.886278e-02, 3.216606e-01, 4.293281e-02, 6.135666e-02, 7.154787e-02, 4.872966e-02, 9.558260e-03, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 1.516965e-01, 9.942079e-02, 8.220029e-02, 1.162964e-02), shape = Array(32, 1)))(v14)
//    val v15 = dumpScope.dump("v15")(v15_)
    val (v16) = tf.Minimum(constant = 1.000000e+00)(v15)
    val (v17) = tf.Maximum(constant = 0.000000e+00)(v16)
//    val v17 = dumpScope.dump("v17")(v17_)
//    return spatiallib.Materialize()(v17)
    return (v17)
  }
}
