import mlir_libraries.ConversionImplicits._
import mlir_libraries.CommonConstructs._
import tensorflow_lattice.{tf, tfl}
import spatial.libdsl._

import scala.reflect.ClassTag

object santander_8_2_4_8_4_ {
  import mlir_libraries.types._
  def apply[T:Num:ClassTag](args: Seq[Readable2D[T]])(implicit state: argon.State): (Readable2D[T]) = {
    val (v0) = tf.Concatenate(axis = -1)(args(0), args(1), args(2), args(3), args(4), args(5), args(6), args(7), args(8), args(9), args(10), args(11), args(12), args(13), args(14), args(15), args(16), args(17), args(18), args(19), args(20), args(21), args(22), args(23), args(24), args(25), args(26), args(27), args(28), args(29), args(30), args(31), args(32), args(33), args(34), args(35), args(36), args(37), args(38), args(39), args(40), args(41), args(42), args(43), args(44), args(45), args(46), args(47), args(48), args(49), args(50), args(51), args(52), args(53), args(54), args(55), args(56), args(57), args(58), args(59), args(60), args(61), args(62), args(63), args(64), args(65), args(66), args(67), args(68), args(69), args(70), args(71), args(72), args(73), args(74), args(75), args(76), args(77), args(78), args(79), args(80), args(81), args(82), args(83), args(84), args(85), args(86), args(87), args(88), args(89), args(90), args(91), args(92), args(93), args(94), args(95), args(96), args(97), args(98), args(99), args(100), args(101), args(102), args(103), args(104), args(105), args(106), args(107), args(108), args(109), args(110), args(111), args(112), args(113), args(114), args(115), args(116), args(117), args(118), args(119), args(120), args(121), args(122), args(123), args(124), args(125), args(126), args(127), args(128), args(129), args(130), args(131), args(132), args(133), args(134), args(135), args(136), args(137), args(138), args(139), args(140), args(141), args(142), args(143), args(144), args(145), args(146), args(147), args(148), args(149), args(150), args(151), args(152), args(153), args(154), args(155), args(156), args(157), args(158), args(159), args(160), args(161), args(162), args(163), args(164), args(165), args(166), args(167), args(168), args(169), args(170), args(171), args(172), args(173), args(174), args(175), args(176), args(177), args(178), args(179), args(180), args(181), args(182), args(183), args(184), args(185), args(186), args(187), args(188), args(189), args(190), args(191), args(192), args(193), args(194), args(195), args(196), args(197), args(198), args(199))
    val (v1) = tf.Dense(bias = Array(-1.679588e-01, -1.655786e-01, -2.061478e-01, -1.830083e-01), kernel = Array(Array(6.792300e-04, 1.149706e-01, 1.633440e-01, 8.210566e-02), Array(1.548950e-01, 1.820629e-01, 4.559951e-02, -2.645304e-02), Array(1.969980e-01, 1.633356e-01, -6.519470e-03, 2.760248e-02), Array(-1.242875e-01, 7.179151e-02, 4.241723e-02, 9.130596e-02), Array(4.954914e-02, -2.083563e-02, -3.267476e-02, 7.014922e-02), Array(4.543725e-02, -1.072215e-02, 1.637689e-01, 4.634755e-02), Array(4.384281e-02, 1.796115e-01, 1.194679e-02, 2.294464e-01), Array(4.492323e-02, 7.963647e-02, -1.419230e-01, 2.707478e-02), Array(-3.004011e-02, 5.778916e-02, 1.133696e-01, -3.582668e-02), Array(-5.166744e-02, -1.037037e-01, -2.892103e-02, -1.114967e-01), Array(3.302321e-02, -8.936192e-02, 6.605337e-02, -3.475186e-02), Array(-3.979779e-02, 1.106683e-01, -7.201210e-03, 1.008616e-01), Array(-9.664729e-02, -1.996112e-01, -1.293633e-01, -7.696172e-02), Array(-1.043519e-01, -1.493606e-01, -8.758488e-02, -7.856920e-03), Array(-3.610395e-02, 2.996727e-02, 1.803052e-02, -6.233830e-02), Array(4.788835e-02, 8.048017e-02, 2.810933e-02, -3.402758e-02), Array(5.286261e-02, -5.287547e-02, 4.960062e-02, -2.842717e-02), Array(5.968121e-02, -5.761417e-02, -4.399540e-03, -2.992717e-02), Array(1.397180e-01, 1.650022e-01, -1.054933e-02, 2.330039e-02), Array(5.247388e-02, 1.480195e-02, 4.127920e-03, -1.329610e-02), Array(-1.619362e-02, -6.505723e-02, -8.304929e-02, 8.488430e-03), Array(-9.088913e-02, -3.118008e-02, -2.076520e-01, -6.750730e-02), Array(1.826676e-01, 8.126578e-02, 9.591524e-02, 8.875266e-02), Array(-2.447140e-03, -9.169775e-02, -6.934439e-02, -7.759467e-02), Array(2.963300e-04, 7.473981e-02, 1.207170e-01, 2.837390e-02), Array(7.377081e-02, 3.384122e-02, -5.161788e-02, 9.514050e-03), Array(8.836013e-02, 1.784955e-01, 1.125982e-01, 5.658247e-02), Array(6.675730e-02, -6.505027e-02, -2.806762e-02, -4.014186e-02), Array(-7.952300e-02, 4.247190e-03, 4.545670e-03, -6.592760e-02), Array(1.001841e-01, -1.915214e-02, 2.548070e-03, -5.432829e-02), Array(3.932812e-02, 3.984810e-03, 3.405365e-02, -6.716549e-02), Array(-6.691845e-02, -1.234249e-01, 2.551306e-02, -2.329043e-02), Array(-3.672859e-02, 8.271153e-02, 1.441393e-01, 5.874545e-02), Array(-2.976584e-02, -1.429773e-01, -1.392200e-01, -1.405996e-02), Array(-2.842503e-02, -5.704326e-02, -1.259264e-01, -1.506925e-01), Array(1.039235e-02, 2.301536e-02, -9.333560e-03, 2.260185e-01), Array(-5.496099e-02, -5.894160e-02, -4.058193e-02, -1.028799e-01), Array(3.652198e-02, 3.420956e-02, -1.275447e-02, 3.050410e-03), Array(-6.290666e-02, -3.342395e-02, -3.918567e-02, 1.111424e-01), Array(-8.334862e-02, 6.113810e-02, -8.272800e-04, 1.452709e-02), Array(5.926399e-02, 7.413601e-02, 1.250764e-01, 8.507922e-02), Array(-6.387110e-02, 3.291120e-02, -3.522773e-02, 6.186835e-02), Array(-5.356492e-02, -7.245967e-02, 1.050541e-01, -7.133898e-02), Array(-5.861600e-04, -1.545121e-01, 5.662619e-02, -9.613881e-02), Array(-1.623609e-01, -9.423968e-02, -5.103771e-02, -7.661351e-02), Array(2.179824e-02, 5.686938e-02, -5.034096e-02, -1.483205e-01), Array(1.000353e-01, 8.328319e-02, -7.580366e-02, -6.389324e-02), Array(-6.331147e-02, 6.306032e-02, -1.854914e-02, 4.461586e-02), Array(1.082689e-01, 1.109039e-02, 1.164587e-01, 1.840555e-02), Array(7.352313e-02, -2.619715e-02, 6.664528e-02, 9.644695e-02), Array(2.869350e-03, -1.364509e-01, 8.036700e-04, 3.778543e-02), Array(1.033386e-01, -5.109584e-02, -3.057631e-02, 1.526768e-01), Array(-2.405682e-02, 1.352902e-01, 2.521067e-02, 4.574937e-02), Array(1.285289e-01, 1.872980e-02, 1.905390e-01, 1.258854e-01), Array(-1.701306e-01, -2.444275e-02, 2.897551e-02, -1.355929e-02), Array(-4.401819e-02, 8.014990e-02, 8.903073e-02, 2.254247e-02), Array(-2.122176e-02, -3.617429e-02, -1.167327e-01, -6.853086e-02), Array(4.848230e-03, 5.812680e-03, -1.318329e-01, -1.510835e-02), Array(-9.482521e-02, 1.244306e-02, -4.164381e-02, -5.123049e-02), Array(-4.116108e-02, -2.756762e-02, -6.905302e-02, 3.139098e-02), Array(-1.539810e-03, -5.254542e-02, 1.169136e-02, 4.756538e-02), Array(-3.277643e-02, 1.142082e-01, 4.193901e-02, -4.045997e-02), Array(5.725559e-02, 1.422517e-01, -1.349566e-01, 2.732581e-02), Array(-7.217130e-02, 3.141667e-02, 1.087691e-02, -7.359970e-02), Array(9.968942e-02, -6.167475e-02, -1.075583e-01, -1.930788e-02), Array(1.533203e-02, 6.944475e-02, -3.191657e-02, 1.186620e-03), Array(9.361500e-04, 8.176456e-02, -7.542411e-02, 1.418774e-01), Array(1.388358e-01, -1.497541e-02, 1.184860e-02, 1.975397e-01), Array(-5.006052e-02, -4.099430e-02, 1.292142e-02, 4.914200e-04), Array(-6.469030e-03, 7.703362e-02, -4.285234e-02, 3.908056e-02), Array(1.345054e-01, -1.133703e-01, 1.047754e-01, 7.970858e-02), Array(1.373289e-02, 1.633370e-01, 2.260340e-02, 4.505344e-02), Array(-1.200933e-02, 3.154396e-02, 6.516121e-02, -1.666219e-01), Array(-5.694129e-02, 6.602553e-02, -8.348902e-02, 4.912989e-02), Array(4.398930e-03, 1.544541e-01, -2.445503e-02, -1.346720e-03), Array(-1.255681e-01, 1.181977e-02, -1.684936e-01, 1.728159e-02), Array(-1.506481e-01, -1.116706e-01, -1.605751e-01, 6.377810e-03), Array(-3.310561e-02, -1.055553e-02, -1.212762e-01, 1.594174e-02), Array(2.653148e-02, 1.158458e-01, 8.649403e-02, 1.329574e-01), Array(-5.193627e-02, -4.366283e-02, 4.333859e-02, 1.038472e-01), Array(-7.138706e-02, -7.742532e-02, -6.009914e-02, -1.928692e-01), Array(-6.129025e-02, -1.431970e-01, -2.298683e-01, -1.464507e-01), Array(-6.179060e-03, 1.113931e-01, 2.515051e-02, 3.445002e-02), Array(-1.278887e-01, -4.403511e-02, -8.107806e-02, 9.330722e-02), Array(-1.379752e-02, 6.135475e-02, 5.684774e-02, -6.733880e-03), Array(1.376413e-02, -3.681352e-02, -7.371287e-02, -4.778165e-02), Array(-1.116245e-01, -2.170203e-02, -1.785952e-01, 1.193522e-02), Array(4.897477e-02, -1.720142e-01, 6.737280e-03, -1.314607e-01), Array(-7.712584e-02, -4.243954e-02, 4.828340e-03, 1.947965e-02), Array(1.159188e-01, 1.198489e-01, -5.786187e-02, 7.877512e-02), Array(5.849865e-02, -9.675390e-03, 6.149417e-02, 9.859299e-02), Array(1.912470e-03, 1.674615e-02, 1.490726e-01, 7.621901e-02), Array(-7.620527e-02, -1.603466e-01, 5.981297e-02, -1.669379e-01), Array(-4.157974e-02, -3.288109e-02, -1.407887e-01, -4.549996e-02), Array(3.270838e-02, 1.696829e-02, 1.593530e-01, 1.413120e-01), Array(1.339998e-01, -2.781436e-02, 8.700382e-02, 1.056308e-01), Array(4.343630e-02, 3.769478e-02, 8.161870e-03, -2.357758e-02), Array(5.805457e-02, -6.571398e-02, 3.294551e-02, 1.006760e-01), Array(-1.032467e-01, -4.876284e-02, 9.379580e-02, 4.630033e-02), Array(1.124953e-01, 1.579238e-01, 6.322978e-02, 1.195324e-01), Array(-2.764358e-02, 6.999344e-02, 4.285963e-02, -6.582280e-02), Array(-3.739983e-02, 9.010962e-02, -1.052071e-01, -1.031755e-02), Array(-6.554032e-02, -7.079377e-02, 8.519036e-02, -5.651958e-02), Array(-4.916100e-03, 7.037267e-02, -1.150078e-01, 2.057346e-02), Array(-1.189326e-01, -9.195684e-02, 3.144005e-02, -2.671588e-02), Array(1.445743e-01, 1.815232e-01, -3.897060e-02, -1.053115e-01), Array(8.778440e-03, -7.534260e-03, 4.426942e-02, 1.795462e-01), Array(-6.635028e-02, -6.458241e-02, -9.237859e-02, -4.813754e-02), Array(-1.263631e-01, -9.948643e-02, -1.044952e-01, -2.617907e-02), Array(-1.024565e-01, -1.553105e-01, 5.068287e-02, -1.600032e-01), Array(2.118912e-01, 7.462183e-02, -8.971300e-03, 1.776424e-01), Array(1.152333e-01, 1.112248e-01, 3.105586e-02, -7.459848e-02), Array(5.873076e-02, 2.557432e-02, 3.208570e-02, 7.388493e-02), Array(1.991287e-02, 2.138488e-02, -5.032928e-02, -8.527296e-02), Array(-6.117490e-02, -7.096253e-02, -1.347187e-01, 7.859555e-02), Array(-5.307234e-02, -6.714280e-02, -7.066114e-02, -1.468812e-01), Array(4.938773e-02, -1.059682e-01, -5.120000e-02, -7.641573e-02), Array(-8.136131e-02, 3.026181e-02, 3.518499e-02, 3.776990e-02), Array(-6.907289e-02, 1.341883e-01, 1.196528e-01, 1.273818e-01), Array(-4.284047e-02, 1.189831e-01, 1.680630e-01, -1.065195e-02), Array(1.948097e-02, 3.587091e-02, -1.285996e-01, -6.832729e-02), Array(5.693156e-02, -1.014756e-01, -1.087672e-01, -1.565440e-01), Array(-1.586122e-02, -1.142220e-01, -1.629978e-01, -3.963404e-02), Array(-5.162376e-02, -5.213980e-02, -9.865278e-02, -5.143810e-02), Array(5.343503e-02, -7.898191e-02, -7.594378e-02, 1.202006e-01), Array(1.167562e-01, -1.047225e-01, 8.024256e-02, 9.855556e-02), Array(-3.127907e-02, 9.793260e-03, 8.938780e-02, -6.158890e-02), Array(-1.445247e-01, -8.930730e-02, 3.282919e-02, -8.271480e-02), Array(5.176722e-02, 9.163629e-02, 3.308088e-02, 5.854900e-03), Array(4.880316e-02, -7.301978e-02, -3.008408e-02, -1.516630e-02), Array(1.134636e-01, 9.651154e-02, 7.310151e-02, 5.282830e-03), Array(-8.489315e-02, 4.780561e-02, -1.618546e-01, 4.370205e-02), Array(-8.529873e-02, 6.622172e-02, -8.072715e-02, -6.858792e-02), Array(1.485760e-01, 4.714064e-02, 1.125210e-01, 4.534171e-02), Array(6.792970e-03, 2.690686e-02, 2.125146e-02, 7.121859e-02), Array(5.386167e-02, 9.470654e-02, -7.028268e-02, 1.167279e-01), Array(4.153462e-02, -2.358627e-02, 3.192240e-02, -9.626073e-02), Array(1.187596e-01, 3.321934e-02, -6.053078e-02, 1.367493e-01), Array(5.157595e-02, 2.596004e-02, 9.095000e-03, 7.641681e-02), Array(-1.851031e-01, -6.538345e-02, -1.465219e-01, -1.065937e-01), Array(-2.505520e-02, 4.093543e-02, 1.992900e-03, 1.021720e-01), Array(-7.333332e-02, -8.788626e-02, 5.725141e-02, -1.472605e-01), Array(5.466226e-02, -3.859266e-02, 1.822421e-02, -1.620268e-01), Array(-9.594184e-02, -3.044513e-02, 2.431114e-02, -1.577557e-02), Array(-3.276994e-02, 6.717664e-02, 2.500006e-02, 8.064992e-02), Array(1.043728e-01, 1.043676e-01, 4.244572e-02, -2.101124e-02), Array(-1.388098e-01, -9.167492e-02, -8.693860e-02, -9.827365e-02), Array(1.921198e-02, 8.193158e-02, 8.534095e-02, 9.043889e-02), Array(2.843050e-02, -1.541018e-01, -2.300616e-01, -5.570500e-03), Array(-2.200415e-01, 1.611450e-02, -7.982101e-02, -5.341542e-02), Array(-4.765380e-03, -9.490297e-02, -1.753706e-02, -5.732510e-02), Array(5.936727e-02, -3.845702e-02, 7.145820e-02, 1.091660e-01), Array(-3.661324e-02, -1.041889e-01, -1.967044e-02, 3.980958e-02), Array(-5.869241e-02, 5.992878e-02, -1.248710e-02, -2.278797e-02), Array(-8.041735e-02, -1.675733e-01, -6.147559e-02, -2.919309e-02), Array(-1.501251e-02, 1.272709e-01, 5.070496e-02, 1.061571e-01), Array(9.170119e-02, -6.250600e-04, -1.460116e-01, -9.117449e-02), Array(-5.963894e-02, 6.787812e-02, 1.164230e-01, 1.004990e-01), Array(-9.631673e-02, 1.022558e-01, -9.094870e-02, 7.140779e-02), Array(1.199942e-01, -5.173072e-02, 9.572680e-03, 4.329573e-02), Array(5.712082e-02, -2.159497e-02, 2.697219e-02, -1.045801e-01), Array(-5.232156e-02, 1.561040e-02, 6.086241e-02, -4.463070e-03), Array(1.420938e-01, 3.622211e-02, 6.657866e-02, -3.057820e-03), Array(-2.933122e-02, 1.011488e-01, 1.556146e-01, 8.467720e-03), Array(1.168053e-01, 4.484644e-02, 1.194050e-01, 2.496114e-02), Array(-8.286452e-02, -7.467162e-02, 1.863770e-03, -2.274825e-01), Array(-1.278963e-01, -1.833917e-01, 3.275290e-02, -1.649145e-01), Array(5.709521e-02, -9.823400e-03, -7.188200e-04, 1.564129e-01), Array(-3.817784e-02, 6.369764e-02, 6.061036e-02, 9.764500e-03), Array(-1.410648e-01, 4.546147e-02, -9.550675e-02, -2.055576e-01), Array(1.195018e-01, -7.294640e-03, 1.319194e-01, 1.205958e-01), Array(5.333961e-02, -7.112426e-02, 1.807921e-02, 1.070883e-01), Array(-1.186826e-01, 4.052296e-02, -1.133149e-01, -8.835822e-02), Array(1.139593e-01, 1.096756e-01, 8.086986e-02, -9.045340e-03), Array(-1.724789e-01, -1.273567e-01, -1.618581e-02, -1.260427e-01), Array(-1.266155e-02, 1.473675e-01, 1.005511e-01, -6.918804e-02), Array(-2.500360e-03, 1.038796e-01, 3.259723e-02, -8.508044e-02), Array(-1.245862e-01, -1.163363e-01, 2.902604e-02, -1.081153e-01), Array(8.317260e-03, -1.488986e-01, -2.766929e-02, 3.873950e-02), Array(6.339690e-02, 8.090062e-02, 6.634553e-02, 1.394572e-01), Array(1.182657e-01, 2.342883e-02, 4.066721e-02, 4.769609e-02), Array(1.817049e-02, 1.718830e-03, -8.523570e-03, 1.003662e-01), Array(-5.765357e-02, 7.848772e-02, 7.651060e-03, -1.535857e-01), Array(-5.296505e-02, -1.602531e-02, 4.199746e-02, 4.966309e-02), Array(2.927279e-02, 1.432938e-01, 1.532453e-01, 1.365804e-02), Array(7.472965e-02, -5.386831e-02, -1.426989e-01, 1.079368e-01), Array(-6.857041e-02, 5.036683e-02, -1.141730e-01, -1.272857e-01), Array(1.971165e-02, 5.099864e-02, 9.351926e-02, -6.578290e-03), Array(-6.709509e-02, -5.805052e-02, -5.360478e-02, -8.937453e-02), Array(-1.089568e-02, -5.049885e-02, 1.277302e-02, 1.113790e-01), Array(1.472909e-01, -4.115080e-03, 1.018617e-01, 1.621061e-01), Array(3.064761e-02, 1.619353e-01, 1.008491e-01, 3.369540e-02), Array(1.505345e-02, -1.972504e-01, -8.698434e-02, -7.782730e-02), Array(-9.039336e-02, 6.730410e-03, -1.557210e-02, -5.225725e-02), Array(-8.150303e-02, -3.243370e-02, -1.538626e-01, 1.018332e-01), Array(7.032440e-03, -3.822394e-02, 1.176424e-01, 8.907834e-02), Array(6.686247e-02, -2.900984e-02, 1.802083e-01, -3.523925e-02), Array(-1.852178e-01, -1.832657e-02, -4.055797e-02, -1.257487e-02), Array(-1.053764e-01, -1.792269e-01, -2.160243e-02, -1.072441e-01), Array(9.120490e-02, -3.241749e-02, 1.556560e-01, -3.389011e-02)))(v0)
    val (v2) = tf.Stack(axis = 1)(v1, v1, v1, v1)
    val (v3_) = tfl.Lattice(lattice_kernel = Array(Array(2.685013e-02, 2.685013e-02, 2.685069e-02, 2.685014e-02), Array(2.464638e-01, 2.464638e-01, 2.464635e-01, 2.464639e-01), Array(2.464955e-01, 2.464955e-01, 2.464956e-01, 2.464955e-01), Array(5.003623e-01, 5.003623e-01, 5.003631e-01, 5.003621e-01), Array(2.389680e-01, 2.389680e-01, 2.389681e-01, 2.389680e-01), Array(4.952059e-01, 4.952059e-01, 4.952065e-01, 4.952064e-01), Array(4.896173e-01, 4.896173e-01, 4.896177e-01, 4.896174e-01), Array(7.710143e-01, 7.710143e-01, 7.710146e-01, 7.710144e-01), Array(2.443628e-01, 2.443628e-01, 2.443668e-01, 2.443629e-01), Array(4.925938e-01, 4.925938e-01, 4.925943e-01, 4.925931e-01), Array(5.075736e-01, 5.075736e-01, 5.075728e-01, 5.075738e-01), Array(7.592998e-01, 7.592998e-01, 7.592999e-01, 7.593000e-01), Array(4.906704e-01, 4.906704e-01, 4.906723e-01, 4.906697e-01), Array(7.611184e-01, 7.611184e-01, 7.611179e-01, 7.611120e-01), Array(7.564210e-01, 7.564210e-01, 7.564213e-01, 7.564213e-01), Array(9.876698e-01, 9.876698e-01, 9.876691e-01, 9.876688e-01)), shape = Array(2, 2, 2, 2), tp = "hypercube", units = 4)(v2)
    val v3 = Materialize(v3_)
    val (v4) = tfl.PWLCalibration(input_keypoints = Array(0.000000e+00, 1.428571e-01, 2.857143e-01, 4.285714e-01, 5.714286e-01, 7.142857e-01, 8.571429e-01, 1.000000e+00), pwl_calibration_kernel = Array(Array(8.277230e-03, 8.277230e-03, 8.277270e-03, 8.277270e-03), Array(1.327271e-01, 1.327271e-01, 1.327270e-01, 1.327274e-01), Array(1.293639e-01, 1.293639e-01, 1.293656e-01, 1.293659e-01), Array(1.234623e-01, 1.234623e-01, 1.234654e-01, 1.234646e-01), Array(1.488657e-01, 1.488657e-01, 1.488600e-01, 1.488662e-01), Array(1.109630e-01, 1.109630e-01, 1.109617e-01, 1.109644e-01), Array(1.693039e-01, 1.693039e-01, 1.693030e-01, 1.693035e-01), Array(1.770369e-01, 1.770369e-01, 1.770400e-01, 1.770307e-01)))(v3)
    val (v5) = tf.Stack(axis = 1)(v4, v4, v4, v4)
    val (v6) = tfl.Lattice(lattice_kernel = Array(Array(1.745034e-02, 1.745034e-02, 1.745031e-02, 1.745194e-02), Array(2.500690e-01, 2.500690e-01, 2.500689e-01, 2.500693e-01), Array(2.500688e-01, 2.500688e-01, 2.500688e-01, 2.500693e-01), Array(4.980985e-01, 4.980985e-01, 4.980985e-01, 4.980987e-01), Array(2.500689e-01, 2.500689e-01, 2.500688e-01, 2.500694e-01), Array(4.980987e-01, 4.980987e-01, 4.980986e-01, 4.980990e-01), Array(4.980986e-01, 4.980986e-01, 4.980987e-01, 4.980987e-01), Array(7.432253e-01, 7.432253e-01, 7.432253e-01, 7.432251e-01), Array(2.500689e-01, 2.500689e-01, 2.500688e-01, 2.500694e-01), Array(4.980987e-01, 4.980987e-01, 4.980986e-01, 4.980990e-01), Array(4.980986e-01, 4.980986e-01, 4.980987e-01, 4.980987e-01), Array(7.432253e-01, 7.432253e-01, 7.432253e-01, 7.432251e-01), Array(4.980987e-01, 4.980987e-01, 4.980988e-01, 4.980989e-01), Array(7.432250e-01, 7.432250e-01, 7.432250e-01, 7.432249e-01), Array(7.432253e-01, 7.432253e-01, 7.432255e-01, 7.432253e-01), Array(1.000000e+00, 1.000000e+00, 1.000000e+00, 1.000000e+00)), shape = Array(2, 2, 2, 2), tp = "hypercube", units = 4)(v5)
    val (v7) = tfl.PWLCalibration(input_keypoints = Array(0.000000e+00, 1.428571e-01, 2.857143e-01, 4.285714e-01, 5.714286e-01, 7.142857e-01, 8.571429e-01, 1.000000e+00), pwl_calibration_kernel = Array(Array(1.002192e-02, 1.002192e-02, 1.002188e-02, 1.002192e-02), Array(1.378106e-01, 1.378106e-01, 1.378098e-01, 1.378101e-01), Array(1.300315e-01, 1.300315e-01, 1.300307e-01, 1.300319e-01), Array(1.239092e-01, 1.239092e-01, 1.239097e-01, 1.239090e-01), Array(1.453989e-01, 1.453989e-01, 1.454002e-01, 1.453978e-01), Array(1.587713e-01, 1.587713e-01, 1.587733e-01, 1.587731e-01), Array(1.334789e-01, 1.334789e-01, 1.334779e-01, 1.334780e-01), Array(1.605779e-01, 1.605779e-01, 1.605766e-01, 1.605783e-01)))(v6)
    val (v8) = tf.Stack(axis = 1)(v7, v7, v7, v7)
    val (v9) = tfl.Lattice(lattice_kernel = Array(Array(1.713020e-02, 1.713020e-02, 1.713021e-02, 1.713040e-02), Array(2.500736e-01, 2.500736e-01, 2.500737e-01, 2.500737e-01), Array(2.500735e-01, 2.500735e-01, 2.500737e-01, 2.500738e-01), Array(4.980660e-01, 4.980660e-01, 4.980662e-01, 4.980660e-01), Array(2.500736e-01, 2.500736e-01, 2.500736e-01, 2.500737e-01), Array(4.980661e-01, 4.980661e-01, 4.980663e-01, 4.980662e-01), Array(4.980661e-01, 4.980661e-01, 4.980662e-01, 4.980660e-01), Array(7.439868e-01, 7.439868e-01, 7.439866e-01, 7.439870e-01), Array(2.500736e-01, 2.500736e-01, 2.500736e-01, 2.500737e-01), Array(4.980661e-01, 4.980661e-01, 4.980663e-01, 4.980662e-01), Array(4.980661e-01, 4.980661e-01, 4.980662e-01, 4.980660e-01), Array(7.439868e-01, 7.439868e-01, 7.439866e-01, 7.439870e-01), Array(4.980661e-01, 4.980661e-01, 4.980663e-01, 4.980661e-01), Array(7.439868e-01, 7.439868e-01, 7.439865e-01, 7.439869e-01), Array(7.439867e-01, 7.439867e-01, 7.439865e-01, 7.439870e-01), Array(1.000000e+00, 1.000000e+00, 1.000000e+00, 1.000000e+00)), shape = Array(2, 2, 2, 2), tp = "hypercube", units = 4)(v8)
    val (v10_) = tfl.PWLCalibration(input_keypoints = Array(0.000000e+00, 1.428571e-01, 2.857143e-01, 4.285714e-01, 5.714286e-01, 7.142857e-01, 8.571429e-01, 1.000000e+00), pwl_calibration_kernel = Array(Array(1.068364e-02, 1.068364e-02, 1.068360e-02, 1.068360e-02), Array(1.437493e-01, 1.437493e-01, 1.437493e-01, 1.437499e-01), Array(1.292040e-01, 1.292040e-01, 1.292038e-01, 1.292056e-01), Array(1.320885e-01, 1.320885e-01, 1.320891e-01, 1.320901e-01), Array(1.369637e-01, 1.369637e-01, 1.369641e-01, 1.369647e-01), Array(1.713161e-01, 1.713161e-01, 1.713097e-01, 1.713136e-01), Array(1.261881e-01, 1.261881e-01, 1.261884e-01, 1.261860e-01), Array(1.498066e-01, 1.498066e-01, 1.498119e-01, 1.498064e-01)))(v9)
    val v10 = Materialize(v10_)
    val (v11) = tf.Stack(axis = 1)(v10, v10, v10, v10)
    val (v12) = tfl.Lattice(lattice_kernel = Array(Array(1.540218e-02, 1.540218e-02, 1.540227e-02, 1.540219e-02), Array(2.499834e-01, 2.499834e-01, 2.499835e-01, 2.499834e-01), Array(2.499836e-01, 2.499836e-01, 2.499837e-01, 2.499835e-01), Array(4.981637e-01, 4.981637e-01, 4.981639e-01, 4.981639e-01), Array(2.499836e-01, 2.499836e-01, 2.499836e-01, 2.499836e-01), Array(4.981638e-01, 4.981638e-01, 4.981639e-01, 4.981639e-01), Array(4.981638e-01, 4.981638e-01, 4.981638e-01, 4.981638e-01), Array(7.446935e-01, 7.446935e-01, 7.446933e-01, 7.446929e-01), Array(2.499836e-01, 2.499836e-01, 2.499836e-01, 2.499836e-01), Array(4.981638e-01, 4.981638e-01, 4.981639e-01, 4.981639e-01), Array(4.981638e-01, 4.981638e-01, 4.981638e-01, 4.981638e-01), Array(7.446935e-01, 7.446935e-01, 7.446933e-01, 7.446929e-01), Array(4.981638e-01, 4.981638e-01, 4.981640e-01, 4.981638e-01), Array(7.446933e-01, 7.446933e-01, 7.446932e-01, 7.446927e-01), Array(7.446933e-01, 7.446933e-01, 7.446931e-01, 7.446930e-01), Array(1.000000e+00, 1.000000e+00, 1.000000e+00, 1.000000e+00)), shape = Array(2, 2, 2, 2), tp = "hypercube", units = 4)(v11)
    val (v13) = tfl.PWLCalibration(input_keypoints = Array(0.000000e+00, 1.428571e-01, 2.857143e-01, 4.285714e-01, 5.714286e-01, 7.142857e-01, 8.571429e-01, 1.000000e+00), pwl_calibration_kernel = Array(Array(9.523730e-03, 9.523730e-03, 9.523770e-03, 9.523750e-03), Array(1.493228e-01, 1.493228e-01, 1.493228e-01, 1.493223e-01), Array(1.265954e-01, 1.265954e-01, 1.265953e-01, 1.265956e-01), Array(1.444310e-01, 1.444310e-01, 1.444297e-01, 1.444289e-01), Array(1.271947e-01, 1.271947e-01, 1.271943e-01, 1.271933e-01), Array(1.757255e-01, 1.757255e-01, 1.757249e-01, 1.757250e-01), Array(1.257669e-01, 1.257669e-01, 1.257678e-01, 1.257656e-01), Array(1.414400e-01, 1.414400e-01, 1.414414e-01, 1.414455e-01)))(v12)
    val (v14) = tf.Stack(axis = 1)(v13, v13, v13, v13)
    val (v15) = tfl.Lattice(lattice_kernel = Array(Array(1.230722e-02, 1.230722e-02, 1.230660e-02, 1.230713e-02), Array(2.497490e-01, 2.497490e-01, 2.497490e-01, 2.497488e-01), Array(2.497490e-01, 2.497490e-01, 2.497490e-01, 2.497488e-01), Array(4.983536e-01, 4.983536e-01, 4.983536e-01, 4.983534e-01), Array(2.497489e-01, 2.497489e-01, 2.497488e-01, 2.497488e-01), Array(4.983536e-01, 4.983536e-01, 4.983536e-01, 4.983536e-01), Array(4.983535e-01, 4.983535e-01, 4.983537e-01, 4.983537e-01), Array(7.453837e-01, 7.453837e-01, 7.453836e-01, 7.453835e-01), Array(2.497489e-01, 2.497489e-01, 2.497488e-01, 2.497488e-01), Array(4.983536e-01, 4.983536e-01, 4.983536e-01, 4.983536e-01), Array(4.983535e-01, 4.983535e-01, 4.983537e-01, 4.983537e-01), Array(7.453837e-01, 7.453837e-01, 7.453836e-01, 7.453835e-01), Array(4.983535e-01, 4.983535e-01, 4.983536e-01, 4.983537e-01), Array(7.453836e-01, 7.453836e-01, 7.453834e-01, 7.453835e-01), Array(7.453833e-01, 7.453833e-01, 7.453833e-01, 7.453834e-01), Array(1.000000e+00, 1.000000e+00, 1.000000e+00, 1.000000e+00)), shape = Array(2, 2, 2, 2), tp = "hypercube", units = 4)(v14)
    val (v16) = tfl.PWLCalibration(input_keypoints = Array(0.000000e+00, 1.428571e-01, 2.857143e-01, 4.285714e-01, 5.714286e-01, 7.142857e-01, 8.571429e-01, 1.000000e+00), pwl_calibration_kernel = Array(Array(6.060090e-03, 6.060090e-03, 6.060100e-03, 6.060100e-03), Array(1.515358e-01, 1.515358e-01, 1.515364e-01, 1.515357e-01), Array(1.217555e-01, 1.217555e-01, 1.217552e-01, 1.217570e-01), Array(1.557301e-01, 1.557301e-01, 1.557297e-01, 1.557280e-01), Array(1.159390e-01, 1.159390e-01, 1.159344e-01, 1.159372e-01), Array(1.761984e-01, 1.761984e-01, 1.761999e-01, 1.761986e-01), Array(1.263707e-01, 1.263707e-01, 1.263725e-01, 1.263734e-01), Array(1.464105e-01, 1.464105e-01, 1.464118e-01, 1.464100e-01)))(v15)
    val (v17) = tf.Stack(axis = 1)(v16, v16, v16, v16)
    val (v18) = tfl.Lattice(lattice_kernel = Array(Array(9.202900e-03, 9.202900e-03, 9.196360e-03, 9.202850e-03), Array(2.493960e-01, 2.493960e-01, 2.493959e-01, 2.493960e-01), Array(2.493960e-01, 2.493960e-01, 2.493959e-01, 2.493961e-01), Array(4.984382e-01, 4.984382e-01, 4.984389e-01, 4.984384e-01), Array(2.493960e-01, 2.493960e-01, 2.493959e-01, 2.493961e-01), Array(4.984383e-01, 4.984383e-01, 4.984389e-01, 4.984384e-01), Array(4.984383e-01, 4.984383e-01, 4.984390e-01, 4.984385e-01), Array(7.460093e-01, 7.460093e-01, 7.460099e-01, 7.460098e-01), Array(2.493960e-01, 2.493960e-01, 2.493959e-01, 2.493961e-01), Array(4.984383e-01, 4.984383e-01, 4.984389e-01, 4.984384e-01), Array(4.984383e-01, 4.984383e-01, 4.984390e-01, 4.984385e-01), Array(7.460093e-01, 7.460093e-01, 7.460099e-01, 7.460098e-01), Array(4.984383e-01, 4.984383e-01, 4.984390e-01, 4.984385e-01), Array(7.460093e-01, 7.460093e-01, 7.460099e-01, 7.460096e-01), Array(7.460094e-01, 7.460094e-01, 7.460099e-01, 7.460096e-01), Array(1.000000e+00, 1.000000e+00, 1.000000e+00, 1.000000e+00)), shape = Array(2, 2, 2, 2), tp = "hypercube", units = 4)(v17)
    val (v19_) = tfl.PWLCalibration(input_keypoints = Array(0.000000e+00, 1.428571e-01, 2.857143e-01, 4.285714e-01, 5.714286e-01, 7.142857e-01, 8.571429e-01, 1.000000e+00), pwl_calibration_kernel = Array(Array(2.233120e-03, 2.233120e-03, 2.233110e-03, 2.233110e-03), Array(1.441131e-01, 1.441131e-01, 1.441134e-01, 1.441130e-01), Array(1.122464e-01, 1.122464e-01, 1.122474e-01, 1.122463e-01), Array(1.566731e-01, 1.566731e-01, 1.566734e-01, 1.566734e-01), Array(9.620905e-02, 9.620905e-02, 9.620774e-02, 9.620893e-02), Array(1.690687e-01, 1.690687e-01, 1.690689e-01, 1.690702e-01), Array(1.282603e-01, 1.282603e-01, 1.282592e-01, 1.282597e-01), Array(1.876391e-01, 1.876391e-01, 1.876401e-01, 1.876419e-01)))(v18)
    val v19 = Materialize(v19_)
    val (v20) = tf.Stack(axis = 1)(v19, v19, v19, v19)
    val (v21) = tfl.Lattice(lattice_kernel = Array(Array(9.164800e-03, 9.164800e-03, 9.163930e-03, 9.163780e-03), Array(2.492203e-01, 2.492203e-01, 2.492201e-01, 2.492203e-01), Array(2.492203e-01, 2.492203e-01, 2.492201e-01, 2.492202e-01), Array(4.980460e-01, 4.980460e-01, 4.980462e-01, 4.980462e-01), Array(2.492203e-01, 2.492203e-01, 2.492201e-01, 2.492202e-01), Array(4.980458e-01, 4.980458e-01, 4.980460e-01, 4.980461e-01), Array(4.980460e-01, 4.980460e-01, 4.980462e-01, 4.980463e-01), Array(7.464550e-01, 7.464550e-01, 7.464548e-01, 7.464553e-01), Array(2.492203e-01, 2.492203e-01, 2.492201e-01, 2.492202e-01), Array(4.980458e-01, 4.980458e-01, 4.980460e-01, 4.980461e-01), Array(4.980460e-01, 4.980460e-01, 4.980462e-01, 4.980463e-01), Array(7.464550e-01, 7.464550e-01, 7.464548e-01, 7.464553e-01), Array(4.980458e-01, 4.980458e-01, 4.980461e-01, 4.980462e-01), Array(7.464549e-01, 7.464549e-01, 7.464549e-01, 7.464552e-01), Array(7.464551e-01, 7.464551e-01, 7.464549e-01, 7.464555e-01), Array(1.000000e+00, 1.000000e+00, 1.000000e+00, 1.000000e+00)), shape = Array(2, 2, 2, 2), tp = "hypercube", units = 4)(v20)
    val (v22) = tfl.PWLCalibration(input_keypoints = Array(0.000000e+00, 1.428571e-01, 2.857143e-01, 4.285714e-01, 5.714286e-01, 7.142857e-01, 8.571429e-01, 1.000000e+00), pwl_calibration_kernel = Array(Array(2.463620e-03, 2.463620e-03, 2.463610e-03, 2.463620e-03), Array(1.331063e-01, 1.331063e-01, 1.331065e-01, 1.331067e-01), Array(9.668195e-02, 9.668195e-02, 9.668259e-02, 9.668170e-02), Array(1.355420e-01, 1.355420e-01, 1.355422e-01, 1.355425e-01), Array(1.071107e-01, 1.071107e-01, 1.071123e-01, 1.071119e-01), Array(1.406432e-01, 1.406432e-01, 1.406438e-01, 1.406433e-01), Array(1.465279e-01, 1.465279e-01, 1.465269e-01, 1.465271e-01), Array(1.759534e-01, 1.759534e-01, 1.759518e-01, 1.759544e-01)))(v21)
    val (v23) = tf.Stack(axis = 1)(v22, v22, v22, v22)
    val (v24) = tfl.Lattice(lattice_kernel = Array(Array(1.560612e-02, 6.164430e-03, 1.335613e-02, 2.360174e-02), Array(2.516413e-01, 2.504476e-01, 2.490921e-01, 2.446853e-01), Array(2.516413e-01, 2.504476e-01, 2.490921e-01, 2.446855e-01), Array(4.990011e-01, 4.996456e-01, 5.028272e-01, 4.866962e-01), Array(2.516413e-01, 2.504476e-01, 2.490921e-01, 2.446859e-01), Array(4.990011e-01, 4.996456e-01, 5.028272e-01, 4.866960e-01), Array(4.990011e-01, 4.996456e-01, 5.028270e-01, 4.866962e-01), Array(7.484393e-01, 7.494752e-01, 7.526309e-01, 7.367032e-01), Array(2.516413e-01, 2.504476e-01, 2.490921e-01, 2.446859e-01), Array(4.990011e-01, 4.996456e-01, 5.028272e-01, 4.866960e-01), Array(4.990011e-01, 4.996456e-01, 5.028270e-01, 4.866962e-01), Array(7.484393e-01, 7.494752e-01, 7.526309e-01, 7.367032e-01), Array(4.990011e-01, 4.996456e-01, 5.028270e-01, 4.866963e-01), Array(7.484393e-01, 7.494752e-01, 7.526309e-01, 7.367029e-01), Array(7.484393e-01, 7.494752e-01, 7.526308e-01, 7.367024e-01), Array(9.975852e-01, 9.991466e-01, 9.929768e-01, 1.000000e+00)), shape = Array(2, 2, 2, 2), tp = "hypercube", units = 4)(v23)
    val (v25) = tfl.Linear(linear_layer_bias = -1.183795e-01, linear_layer_kernel = Array(Array(8.827863e-04), Array(7.077389e-04), Array(6.864301e-04), Array(9.977230e-01)))(v24)
    val (v26) = tfl.PWLCalibration(input_keypoints = Array(0.000000e+00, 1.428571e-01, 2.857143e-01, 4.285714e-01, 5.714286e-01, 7.142857e-01, 8.571429e-01, 1.000000e+00), pwl_calibration_kernel = Array(Array(1.457920e-02), Array(6.715970e-02), Array(1.290179e-01), Array(2.057616e-01), Array(4.827586e-02), Array(2.778746e-01), Array(1.299195e-01), Array(1.218265e-01)))(v25)
    return (v26)
  }
}

@spatial object santander_8_2_4_8_4 extends SpatialApp {
  import spatial.dsl._
  type T = spatial.dsl.F32
  val dimensions = 200
  val iterations = 8
  def main(args: Array[String]) : Unit = {
    val input_DRAM = DRAM[T](dimensions, iterations)
    val output_DRAM = DRAM[T](iterations)

    Accel {
      val input_srams = scala.Range(0, dimensions) map {_ => SRAM[T](1, iterations)}
      input_srams.zipWithIndex map {
        case (x, i) => x load input_DRAM( i::i+1, 0::iterations)
      }
      val as_args = input_srams map {x => RR2(x)}
      val output_sram = SRAM[T](iterations)
      val result = santander_8_2_4_8_4_(as_args)
      Pipe.Foreach(iterations by 1 par iterations) { i =>
        output_sram(i) = result(i, 0)()
      }

      output_DRAM store output_sram
    }
    println(getMem(output_DRAM))
  }
}
